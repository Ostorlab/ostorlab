"""Unit tests for Report Vulnerability Mixin."""

from typing import List

import pytest

from ostorlab.agent import agent
from ostorlab.agent import definitions as agent_definitions
from ostorlab.agent.kb import kb as knowledge_base
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from ostorlab.runtimes import definitions as runtime_definitions


class TestAgent(agent.Agent, agent_report_vulnerability_mixin.AgentReportVulnMixin):
    pass


def testSendVulnerabilityMessage_whenKbEntryIsValid_emitVulnerabilityMessage(agent_mock: List[object]) -> None:
    """Prepares & emit vulnerability message with all the information from the Knowledge base."""
    agent_definition = agent_definitions.AgentDefinition(name='some_name', out_selectors=['v3.report.vulnerability'])
    agent_settings = runtime_definitions.AgentSettings(key='some_key')
    report_vul_mixin = TestAgent(agent_definition, agent_settings)
    report_vul_mixin.report_vulnerability(
        entry=knowledge_base.KB.VIRUSTOTAL_SCAN,
        technical_detail='some_technical_detail',
        risk_rating=agent_report_vulnerability_mixin.RiskRating.HIGH,
        dna='some_dna')

    assert len(agent_mock) == 1
    assert agent_mock[0].selector == 'v3.report.vulnerability'
    assert agent_mock[0].data['short_description'] == 'VirusTotal Malware analysis.'
    assert agent_mock[0].data['privacy_issue']
    assert agent_mock[0].data['security_issue']
    assert agent_mock[0].data['risk_rating'] == 'HIGH'
    assert agent_mock[0].data['references'] == [{'title': 'Virustotal', 'url': 'https://www.virustotal.com/'}]


# parametrize with a list of fixtures
@pytest.mark.parametrize('asset_location_fixture',
                         ['asset_location_android_aab',
                          'asset_location_ios_store',
                          'asset_location_ipv4',
                          'asset_location_ipv6',
                          'asset_location_domain_name',
                          'asset_location_android_store',
                          'asset_location_ios_ipa',
                          'asset_location_link_asset',
                          'asset_location_file',
                          'asset_location_android_apk'])
def testSendVulnerabilityMessageWithAssetLocation_whenKbEntryIsValid_emitVulnerabilityMessage(asset_location_fixture,
                                                                                              request,
                                                                                              agent_mock: List[object],
                                                                                              ) -> None:
    """Prepares & emit vulnerability message with all the information from the Knowledge base."""
    agent_definition = agent_definitions.AgentDefinition(name='some_name', out_selectors=['v3.report.vulnerability'])
    agent_settings = runtime_definitions.AgentSettings(key='some_key')
    report_vul_mixin = TestAgent(agent_definition, agent_settings)
    request.getfixturevalue(asset_location_fixture)
    report_vul_mixin.report_vulnerability(
        entry=knowledge_base.KB.VIRUSTOTAL_SCAN,
        technical_detail='some_technical_detail',
        risk_rating=agent_report_vulnerability_mixin.RiskRating.HIGH,
        dna='some_dna',
        asset_location=request.getfixturevalue(asset_location_fixture))

    assert len(agent_mock) == 1
    assert agent_mock[0].selector == 'v3.report.vulnerability'
    assert agent_mock[0].data['short_description'] == 'VirusTotal Malware analysis.'
    assert agent_mock[0].data['privacy_issue']
    assert agent_mock[0].data['security_issue']
    assert agent_mock[0].data['risk_rating'] == 'HIGH'
    assert agent_mock[0].data['asset_location'] is not None
    assert agent_mock[0].data['asset_location']['metadata'] is not None
    assert len(agent_mock[0].data['asset_location']['metadata']) == 4
    assert agent_mock[0].data['references'] == [{'title': 'Virustotal', 'url': 'https://www.virustotal.com/'}]
